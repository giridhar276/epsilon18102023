python 2.x  ( 2.7  )
------------------------
print 'hello'


python 3.x  ( 3.7  3.8   3.11)
print('hello')




**** Everything in python is object ****
**** Every object contains set of methods ****


objects
---------


number     object = value
-------
number can be integer or decimal or octal or hexa.

aval = 10
bval = 34.43


string
--------
string is defined in single or double or triple quotes.

aname = 'python programming'
bname = "unix shell scripting"
cname = """java programming"""
dname = '''spark programming'''

- string slicing
- string methods


list  ( array in C )
-------
list contains set of elements.
Elements can be numbers or strings or any combination.
list is defined in [].

alist = [10,20,30,40,0]
blist = ["java","unix","oracle",45.34,34]


tuple  ( immutable  unchangeable  uneditable)
-------
tuple contains set of elements.
Elements can be numbers or strings or any combination.
tuple is defined in ().
*** Elements within the tuple cannot be modified directly *****


atup = (10,20,30,40)




dictionary ( hash  hashmap    map   associativearray     json )
---------------------------------------------------
dictionary contains key-value pairs
In dictionary , keys are always unique
key can be either number or string used to uniquely identify the value
value can be number or string or list or tuple or dictionary or any other complex structure.

object = { key:value , key:value , key:value .. }

book   = {"chap1":10  ,"chap2":20 ,"chap3":30}
data = {1:2,3:4,5:6}
book   = {"chap1":["rita","US"]  ,"chap2":["ram","UK'] }





set
-----
set is unordered collection of UNIQUE itmes of same type.


aset = {10,10,20,20,20,30}



builtin functions
-------------------------

print()
input()
range()
len()
type()
isinstance()
dir()
help()
min()
max()
sum()
round()


list()
tuple()
str()
dict()
int()
float()
oct()
set()

How to display all the list of builtin functions and exceptions?

In the console

dir(__builtin__)







operators
-----------


arithmetic operators : + - * % /

relational operarators :  <   <=  >   >=   !=  ==

logical operators :   and  or  not
Eg:
if len(name) == 6   and name.isupper():
    # do something

assignment operators :( ++ and -- are NOT allowed in python )
val = 10
val += 1   (or)  val = val + 1
val -=1    (or)  val = val - 1  


special operators :
+
*
in
as


file handling
--------------------

working with flat files  ( csv  log conf prop  txt )
------------------------------------------------------
read mode  ( r )
write mode  ( w )
append mode  ( a )


opening the file
-----------------

syntax;   object = open(filename,mode)
example:      fr = open("customers.txt","r")  # read mode

              fw = open("customers.txt","w")  # write mode
              case1: If file is already existing .. it overwrites the existing content
              case2: if file is not existing ...... file will be created first
             
	      fa = open("customers.txt","a")   # append mode
              case1: If file is already existing .. it appends the content to the end of file
              case2: if file is not existing ...... file will be created first








closing the file
-------------------
fobj.close()









read operation
-----------------



- reading the file line by line using file object
- fobj.readlines()
- fobj.read()
- using csv library
- using pandas library



exception handling
-----------------------------

There are 2 types of errors.


- syntax error
- semantic error or logical error or runtime error


Handling the errors that occurs during the runtime is kwown excepion nadling.


try     ( mandatory)
except  ( mandatory)
else    ( optional)
finally (  optional)



whatever we discussed so far , we call it essentials of python or core python programming.


library | package | module | routines
----------------------------------------

There are 2 types of libraries


builtin libraries
-----------------------
All the builtin libraries( which are generally used ) are installed with python by default.

with anaconda-spyder :  8000+ libraries are installed
with  IDLE           : 4000+ libraries are installed


third party librareis
-----------------------
Depending on the requirement(cloud,db, ML, automations, gui, web ...), developer has to install third party library from www.pypi.org 

-installing using pip tool
-either downloading it manually from www.pypi.org






























working with third party files ( docx   pptx pdf  .... )
------------------------------------------------------



















install pycharm
install python from python.org


-----------------------------

anaconda spyder comes with python 
(no need of installing python explicity)



re library in python ==   grep + awk + sed in linux


re library in python 
---------------------------

- match
- search
- findall
- split



#############################################
## mysql steps
#############################################


step1 : 
show databases ;

step2: creating your database
create database epsilon;

step3: acces your database
use epsilon;

step4:
create table adultinfo ( workclass varchar(200) , education varchar(200), occupation varchar(500));


step5: inserting records
insert into adultinfo values('public','MS','Engineer');
insert into adultinfo values('private','mbbs','doctor');


step6:
select * from adultinfo;



steps:
--------------

step1: connect to database
step2: define query
step3: execute query
step4: fetch output
step5: close the database






write a program to connect to the database and insert all the records to the excel file with today's timestemp.



debugging your code 
----------------------

using pdb library  ( pdb = python debugger )

There are two ways of using pdb library

- using anaconda spyder
- manually importing pdb	



re library    (   re library in python =    grep + awk + sed in linux )
--------------------------------------------------------------------------------

-search for the patterns
-match for the paterns ( at the beginning of the string )
- findall
- split
- sub ( replacing patterns )


metacharacters (or) wildcard characters    ( common across all the languages )
---------------------------------------
^   $    *   +   ?    .  ()   {}    []  \d  \s \w




rest api
-------------

- URL to access
- endpoint
- authentication details



user definied function | subroutine | definition | block
------------------------------------------------------------
- code reusability
- define the code once and call it for multiple times to reduce the duplication


different ways of passing arguments
-----------------------------------------
-fixed arguments
-default arguments
-keyword arguments
-variable length arguments


Every OS contains some list of processes that are running.
Every process contains set of system calls.
















